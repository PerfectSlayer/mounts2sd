#!/system/bin/sh

scriptAction=$1
scriptVersion="5.1.6"
scriptProps="enabled=1 move_apps=1 move_dalvik=0 move_data=0 enable_reversed_mount=0 enable_cache=2 no_tmpfs_cache=0 enable_swap=1 set_swap_level=0 enable_sdext_journal=0 enable_debug=0 set_sdext_fstype=ext4 set_sdcard_readahead=512 run_sdext_fschk=1 disable_safemode=0 disable_cache_folders=0"
bb=/system/xbin/busybox
tb=/system/bin/toolbox

doProp() {
    doPropAction="$1"
    doPropName="$2"
    doPropValue="$3"

    case "$doPropAction" in
        "set")
            if $bb [ ! -z "$doPropName" ]; then
                $bb echo "$doPropValue" > /props/$doPropName
                $bb chmod 0660 /props/$doPropName
                $bb chown 1000.1000 /props/$doPropName
            fi
        ;;

        "get")
            if $bb [ ! -z "$doPropName" ]; then
                $bb [ -f /props/$doPropName ] && $bb cat /props/$doPropName || $bb echo $doPropValue
            fi
        ;;

        "remove")
            if $bb [ ! -z "$doPropName" ]; then
                $bb [ -f /props/$doPropName ] && $bb rm -rf /props/$doPropName
            fi
        ;;
    esac
}

doLog() {
    doLogLevel="$1"
    doLogLogger="$2"
    doLogMessage="$3"

    [ "$doLogLogger" != "log" ] && doLogLogger="log $doLogLogger"

    for doLogX in $doLogLogger; do
        if $bb [ "$doLogLevel" = "w" ] && $bb [ $(doProp get attention.$doLogX 0) -lt 1 ]; then
                doProp set attention.$doLogX 1

                if $bb [ "$doLogX" != "log" ] || $bb [ "$doLogLogger" = "log" ]; then
                    doProp set message.$doLogX "$doLogMessage"
                fi

        elif $bb [ "$doLogLevel" = "e" ] && $bb [ $(doProp get attention.$doLogX 0) -lt 2 ]; then
                doProp set attention.$doLogX 2

                if $bb [ "$doLogX" != "log" ] || $bb [ "$doLogLogger" = "log" ]; then
                    doProp set message.$doLogX "$doLogMessage"
                fi

        elif $bb [ "$doLogLevel" = "v" ] && $bb [ "$doLogX" != "log" ]; then
            doProp set message.$doLogX "$doLogMessage"
        fi
    done

    if $bb [ "$doLogLevel" != "d" ] || $bb [ $(doProp get config.enable_debug 0) -eq 1 ]; then
        log -p $doLogLevel -t "Mounts2SD" "$doLogMessage"

        $bb echo "$doLogLevel/$doLogMessage" >> /props/content.log
    fi
}

doCreateFolder() {
    $bb [ "$2" = "1" ] && doCFFolder="$1 $($bb echo $1 | $bb sed -e 's/^\/[^\/]*\//\/sd-ext\//')" || doCFFolder="$1"
    doCFCh=0

    for doCFx in $doCFFolder; do
        if $bb [ ! -d $doCFx ]; then
            $bb mkdir $doCFx

            doCFCh=1
        fi
    done

    if $bb [ $doCFCh -eq 1 ]; then
        doSetPerms "$doCFFolder" 1000.1000 0771
    fi
}

doSetPerms() {
    doSPFolder="$1"
    doSPOwner="$2"
    doSPPerm="$3"
    
    for doSPi in $doSPFolder; do
        for doSPx in /*.rc; do
            doSPBuildIn="$($bb grep mkdir $doSPx | $bb grep -ve '^[ \t]*#' | $bb grep " $doSPi " | $bb tail -n1)"

            if $bb [ ! -z "$doSPBuildIn" ]; then
                doSPOwner="$($bb echo $doSPBuildIn | $bb awk '{print $4,$5}' | $bb sed 's/ /\./')"
                doSPPerm="$($bb echo $doSPBuildIn | $bb awk '{print $3}')"

                break
            fi
        done

        break
    done

    if $bb [ -z "$cmdCH" ]; then
        $tb chown 2> /dev/null
        doSPStatus=$?

        # Busybox cannot always set owners based on names, so we use toolbox whenever we can.
        # However not all toolbox versions has chmod and chown included.
        if $bb [ "$doSPStatus" = "255" ]; then
            export cmdCH="$bb"
        else
            export cmdCH="$tb"
        fi
    fi

    for doSPi in $doSPFolder; do
        $cmdCH chmod $doSPPerm $doSPi
        $cmdCH chown $doSPOwner $doSPi 
    done
}

doGetSize() {
    doGetSizePartition=$1
    doGetSizeX=1

    for i in `$bb df -m $doGetSizePartition | $bb tail -n1`; do
        if $bb [ -z "`$bb echo $i | $bb sed -e 's/[0-9]*//'`" ]; then
            if [ $doGetSizeX -eq 3 ]; then
                echo $i; break
            fi

            doGetSizeX=$(($doGetSizeX + 1))
        fi
    done
}

doCheckFolder() {
    doCheckFolderPath=$1
    doCheckFolderValue=0

    for doCheckFolderX in /*.rc; do
        if $bb [ ! -z "`$bb grep mkdir $doCheckFolderX | $bb grep -ve '^[ \t]*#' | $bb grep -e " $doCheckFolderPath\(\/\)* "`" ]; then
            doCheckFolderValue=1; break
        fi
    done

    echo $doCheckFolderValue
}

# This is used as a hack to break out of at any time
for loopwrapper in true; do

	# ===========================================================================================
	# -------------------------------------------------------------------------------------------
	# USE SOME VERY BASIC SHELL SYNTAX TO TEST FOR THE EXISTENCE OF BUSYBOX
	# 

	$bb test 2> /dev/null

	# This is a hacked way of checking whether or not busybox exists.
	# Some toolbox versions are so limited that they don't even support basic echo command, and most are missing things like [ to make proper conditional checks using if and else.
	case "$?" in
		"1") 
            if $bb [ "52223abccbcf00eb3c81300545d63126" != "`( $bb [ 1 -eq 0 ] || $bb [ 0 -eq 1 ] ) && $bb echo no || $bb echo 'remove this part okay:bla=no-4' | $bb grep -e '.*bla=no-[1-9]*' | $bb sed -e 's/^remove //' | $bb awk '{print $3}' | $bb cut -d ':' -f1 | md5sum | $bb awk '{print $1}'`" ]; then
                $tb log -p e -t mounts2sd "The current busybox version is to old or limited to be used with Mounts2SD!"

                break
            fi
        ;;

		*)
			$tb log -p e -t mounts2sd "No busybox binary is present on the device!"

			# Break $loopwrapper
			break
		;;
	esac

	# ===========================================================================================
	# -------------------------------------------------------------------------------------------
	# MAKE SURE THAT WE HAVE ROOT PERMISSIONS AS THIS SCRIPT MAY ALSO BE INVOKED VIA THE APP
	# 

    if $bb [ "`$bb id | $bb sed -ne "s/^uid=\([0-9]*\)[^0-9].*$/\1/p"`" != "0" ]; then
        doLog e enabled "M2SD has been invoked without superuser permissions!"; break
    fi

	# ===========================================================================================
	# -------------------------------------------------------------------------------------------
	# LETS EXECUTE THE SCRIPT OPERATIONS
	# 
    case "$scriptAction" in
        "version")
            $bb echo $scriptVersion
        ;;

        *)
	        modRoot="`$bb grep ' / ' /proc/mounts | $bb sed 's/.*[ ,]\(r[ow]\)[ ,].*/\1/'`"
	        modSystem="`$bb grep ' /system ' /proc/mounts | $bb sed 's/.*[ ,]\(r[ow]\)[ ,].*/\1/'`"

	        $bb [ "$modRoot" != "rw" ] && $bb mount -o remount,rw /
	        $bb [ "$modSystem" != "rw" ] && $bb mount -o remount,rw /system

            doCreateFolder /props

            if $bb [ -e /data/property/m2sd.enabled ] && $bb [ "`$bb cat /data/property/m2sd.enabled`" = "0" ]; then
                doLog v log "M2SD is disabled. Canceling!"; break

            else
                case "$scriptAction" in
                    "finalize")
                        # Used by safe-mode in order to allow the first part to finish before the second part is executed
                        if $bb [ $(doProp get status.enabled 0) -eq 2 ]; then
                            for countdown in `$bb seq 1 10`; do
                                $bb sleep 1

                                if $bb [ $(doProp get status.enabled 0) -lt 2 ]; then
                                    break
                                fi
                            done
                        fi

                        if $bb [ $(doProp get status.enabled 0) -eq 0 ]; then
                            doLog e log "The script has not been fully executed during boot!"

                        else
                            # Do some final stuff to help with the Android app installation problems
                            doLog v log "Executing the final steps of the script"

                            doLog d log "Examining how to handle /data/data/com.android.providers.downloads/cache"
                            if $bb [ -d /data/data/com.android.providers.downloads/cache ]; then
                                $bb [ $(doProp get status.move_data 0) -eq 1 ] && dataLoc=/sd-ext || dataLoc=/data
                                $bb [ $(doProp get status.move_data 0) -eq 1 ] && extLoc=/data || extLoc=/sd-ext

                                $bb [ ! -z "`$bb cat /proc/mounts | $bb grep "$extLoc "`" ] && extSize=$(doGetSize $extLoc) || extSize=0
                                dataSize=$(doGetSize $dataLoc)

                                if $bb [ $(doProp get config.disable_cache_folders) -eq 0 ] && $bb [ $extSize -gt $dataSize ]; then
                                    if $bb [ ! -d $extLoc/data@providers.downloads@cache ]; then
                                        $bb mkdir $extLoc/data@providers.downloads@cache
                                        $bb chmod 0777 $extLoc/data@providers.downloads@cache
                                        $bb chown 2000.2000 $extLoc/data@providers.downloads@cache
                                    fi

                                    if $bb [ -d $dataLoc/data@providers.downloads@cache ]; then
                                        $bb rm -rf $dataLoc/data@providers.downloads@cache
                                    fi

                                    doLog v log "Attaching $dataLoc/data/com.android.providers.downloads/cache on $externalDestination/data@providers.downloads@cache"
                                    lastError=$($bb mount --bind $extLoc/data@providers.downloads@cache $dataLoc/data/com.android.providers.downloads/cache 2>&1)

                                    if $bb [ -z "`$bb busybox grep $dataLoc/data/com.android.providers.downloads/cache /proc/mounts`" ] && $bb [ -z "`$bb busybox grep $extLoc/data@providers.downloads@cache /proc/mounts`" ]; then
                                        doLog w log "Could not attach Attaching $dataLoc/data/com.android.providers.downloads/cache on $extLoc/data@providers.downloads@cache"

                                        if $bb [ ! -z "$lastError" ]; then
                                            doLog d log "Shell Error Message: [$($bb echo $lastError | $bb awk '{print substr($0, 0, 150)}') ...]"
                                        fi
                                    fi

                                else
                                    for i in /data/data@providers.downloads@cache /sd-ext/data@providers.downloads@cache; do
                                        if $bb [ -d $i ]; then
                                            $bb rm -rf $i
                                        fi
                                    done

                                    doLog v log "Changing permissions on /data/data/com.android.providers.downloads/cache"
                                    $bb chmod 0777 /data/data/com.android.providers.downloads/cache
                                fi
                            else
                                doLog d log "The cache folder /data/data/com.android.providers.downloads/cache is not available. Trying again on next boot"
                            fi

                            doLog v log "Changing permissions on /data/local/tmp"
                            if $bb [ ! -d /data/local/tmp ]; then
                                $bb mkdir -p /data/local/tmp
                            fi

                            $bb chmod 0777 /data/local/tmp
                            $bb chown 2000.2000 /data/local/tmp

                            $bb [ ! -z "`$bb cat /proc/mounts | $bb grep "/sd-ext "`" ] && extSize=$(doGetSize /sd-ext) || extSize=0
                            dataSize=$(doGetSize /data)

                            if $bb [ $(doProp get config.disable_cache_folders) -eq 0 ] && $bb [ $extSize -gt $dataSize ]; then
                                if $bb [ ! -d /sd-ext/data@local@tmp ]; then
                                    $bb mkdir /sd-ext/data@local@tmp
                                    $bb chmod 0777 /sd-ext/data@local@tmp
                                    $bb chown 2000.2000 /sd-ext/data@local@tmp
                                fi

                                doLog v log "Attaching /data/local/tmp on /sd-ext/data@local@tmp"
                                lastError=$($bb mount --bind /sd-ext/data@local@tmp /data/local/tmp 2>&1)

                                if $bb [ -z "`$bb grep /data/local/tmp /proc/mounts`" ] && $bb [ -z "`$bb grep /sd-ext/data@local@tmp /proc/mounts`" ]; then
                                    doLog w log "Could not attach /data/local/tmp on /sd-ext/data@local@tmp"

                                    if $bb [ ! -z "$lastError" ]; then
                                        doLog d log "Shell Error Message: [$($bb echo $lastError | $bb awk '{print substr($0, 0, 150)}') ...]"
                                    fi
                                fi

                            else
                                if $bb [ -d /sd-ext/data@local@tmp ]; then
                                    $bb rm -rf /sd-ext/data@local@tmp
                                fi
                            fi

                            doLog d log "Looking for the sqlite3 binary to change the storage threshold"
		                    if $bb [ -e /data/data/com.android.providers.settings/databases/settings.db ] && $bb [ ! -z "`$bb which sqlite3`" ]; then
                                i=0;

			                    while :
			                    do
				                    value=$(sqlite3 /data/data/com.android.providers.settings/databases/settings.db "select value from secure where name = 'sys_storage_threshold_percentage'" 2>&1)
                                    status=$?
				
				                    if $bb [ $status -eq 0 ]; then
                                        doLog v log "Storage threshold is set to 1%"

					                    if $bb [ -z "$value" ] || $bb [ "$value" != "1" ]; then
						                    value=$(sqlite3 /data/data/com.android.providers.settings/databases/settings.db "insert into secure (name, value) VALUES('sys_storage_threshold_percentage','1')" 2>&1)
						                    sqlite3 /data/data/com.android.providers.settings/databases/settings.db "insert into gservices (name, value) VALUES('sys_storage_threshold_percentage','1')"
					                    fi
					
					                    break
				                    fi

                                    if $bb [ $i -gt 9 ]; then
                                        doLog w log "Storage threshold not changed. The Sqlite3 binary returns result code '$status'!"

                                        if $bb [ ! -z "$value" ]; then
                                            doLog d log "Shell Error Message: [$($bb echo $value | $bb awk '{print substr($0, 0, 150)}') ...]"
                                        fi

                                        break
                                    fi

                                    i=$(($i + 1))

				                    sleep 1
			                    done

                            elif $bb [ -z "`$bb which sqlite3`" ]; then
                                doLog v log "Storage threshold not changed. Sqlite3 binary is missing!"
		                    fi
                        fi
                    ;;

                    *)
                        if $bb [ $(doProp get status.enabled 0) -eq 1 ]; then
                            break
                        fi

                        for i in /sd-ext /data/property; do
                            doCreateFolder $i
                        done

                        if $bb [ ! -d /props ]; then
                            doLog e enabled "Could not write to the tmpfs ramdisk!"; break
                        fi

                        doLog v log "Preparing configurations"

                        doProp set status.enabled 2

                        for i in $scriptProps; do
                            iName="`$bb echo $i | $bb cut -d '=' -f1`"

                            if $bb [ ! -e /data/property/m2sd.$iName ]; then
                                doLog d log "Creating missing property /data/property/m2sd.$iName"
                                $bb echo $($bb echo $i | $bb cut -d '=' -f2) > /data/property/m2sd.$iName
                            fi
                        done

                        # We use this for both r-mount protection and for later status review
                        for i in /data/property/m2sd.*; do
                            doLog d log "Moving property $($bb basename $i)='$($bb cat $i)' into /props/"
                            doProp set config.$($bb echo $($bb basename $i) | $bb sed "s/^m2sd\.//") $($bb cat $i)
                        done

                        cmdPS=$($bb which ps || echo "$bb ps")

                        if $bb [ $(doProp get config.disable_safemode) -eq 0 ] && $bb [ ! `$bb sleep 1` ] && $bb [ ! -z "`$cmdPS | $bb grep /system/bin/servicemanager`" ]; then
                            if $bb [ $(doProp get config.enable_reversed_mount 0) -eq 1 ]; then
                                if $bb [ $(doProp get config.move_apps 0) -eq 1 ]; then
                                    $bb echo 0 > /data/property/m2sd.move_apps
                                    $bb echo 0 > /props/config.move_apps
                                else
                                    $bb echo 1 > /data/property/m2sd.move_apps
                                    $bb echo 1 > /props/config.move_apps
                                fi
                            fi

                            for i in move_dalvik move_data enable_reversed_mount; do
                                doLog d log "/system/bin/servicemanager is running, disabling property /data/property/m2sd.$i to prepare safe-mode"
                                $bb echo 0 > /data/property/m2sd.$i
                                $bb echo 0 > /props/config.$i
                            done

                            doLog v enabled "The script is running in safe-mode!"
                            doProp set status.script_safe_mode 1
                        fi

                        doLog v log "Waiting for sdcard to initiate"

                        for mmcTries in `$bb seq 1 8`; do
                            doLog d log "Preparing try number $mmcTries for locating the sdcard"

                            for mmcNum in `$bb seq 0 9`; do
                                if $bb [ -e /sys/block/mmcblk$mmcNum/device/type ]; then
                                    doLog d log "Checking device type on /sys/block/mmcblk$mmcNum"
                                fi
                        
                                if $bb [ -e /sys/block/mmcblk$mmcNum/device/type ] && [ "`$bb cat /sys/block/mmcblk$mmcNum/device/type`" = "SD" ]; then
                                    mmcDevcie=/dev/block/mmcblk$mmcNum && doProp set status.device.sdcard $mmcDevcie
                                    mmcMM=$($bb ls -l $mmcDevcie | $bb tr -s " " | $bb sed -ne "s/^.*[ ]\([0-9]*\),[ ]\([0-9]*\)[ ].*$/\1:\2/p") && doProp set device.sdcard.mm $mmcMM

                                    doLog v log "The sdcard device was located at $mmcDevcie"
                                    doLog d log "The sdcard MM number was located at $mmcMM"

                                    if $bb [ -e /sys/devices/virtual/bdi/$mmcMM/read_ahead_kb ]; then
                                        rhValue=$(doProp get config.set_sdcard_readahead 512)

                                        doLog v log "Setting sdcard readahead to ${rhValue}Kb"

                                        $bb echo $rhValue > /sys/devices/virtual/bdi/$mmcMM/read_ahead_kb

                                        if $bb [ "$rhValue" != "`$bb cat /sys/devices/virtual/bdi/$mmcMM/read_ahead_kb`" ]; then
                                            doLog w set_sdcard_readahead "Could not set the sdcard readahead!"
                                        fi

                                        doProp set status.set_sdcard_readahead $($bb cat /sys/devices/virtual/bdi/$mmcMM/read_ahead_kb)

                                    else
                                        doLog d log "Did not locate the sdcard readahead device file at /sys/devices/virtual/bdi/$mmcMM/read_ahead_kb"
                                    fi

                                    doLog v log "Checking sdcard partitions"

                                    for i in `$bb seq 1 3`; do
                                        doLog d log "Looking for device file ${mmcDevcie}p${i}"

                                        if $bb [ -e ${mmcDevcie}p${i} ]; then
                                            case "$i" in
                                                "1")
                                                    doLog v log "Using ${mmcDevcie}p${i} as fat32 (sdcard)"
                                                    doProp set status.device.sdcard.partition.vfat "${mmcDevcie}p${i}"
                                                ;;

                                                "2")
                                                    mmcExternalFs=$(doProp get config.set_sdext_fstype ext4)

                                                    doLog v log "Using ${mmcDevcie}p${i} as $mmcExternalFs (sd-ext)"
                                                    doProp set status.device.sdcard.partition.sdext "${mmcDevcie}p${i}"

                                                    if $bb [ ! -z "$mmcExternalFs" ] && $bb [ "$mmcExternalFs" != "auto" ] && $bb [ -z "`$bb grep $mmcExternalFs /proc/filesystems | $bb grep -v 'nodev'`" ]; then
                                                        doLog w set_sdext_fstype "The sd-ext filesystem type $mmcExternalFs is not supported. Switched to auto detection!"
                                                        mmcExternalFs="auto"
                                                    fi

                                                    doProp set status.set_sdext_fstype $mmcExternalFs
                                                ;;

                                                "3")
                                                    doLog v log "Using ${mmcDevcie}p${i} as SWAP"
                                                    doProp set status.device.sdcard.partition.swap "${mmcDevcie}p${i}"
                                                ;;
                                            esac
                                       
                                        else
                                            doLog d log "Device file ${mmcDevcie}p${i} does not exist"
                                        fi
                                    done

                                    if $bb [ -z "$(doProp get status.device.sdcard.partition.sdext)" ]; then
                                        doLog w log "The sd-ext partition could not be located!"; break 2

                                    elif $bb [ ! -z "`$bb cat /proc/mounts | $bb grep -w $(doProp get status.device.sdcard.partition.sdext)`" ]; then
                                        doLog w log "The sd-ext device $(doProp get status.device.sdcard.partition.sdext) is already in use by another script!"; break 2
                                    fi

                                    if $bb [ $(doProp get config.run_sdext_fschk) -eq 1 ]; then
                                        if $bb [ ! -z "`$bb which e2fsck`" ]; then
                                            doLog v log "Running file system check on sd-ext"
                                            doProp set status.run_sdext_fschk 1

                                            lastError=$(e2fsck -y -D $(doProp get status.device.sdcard.partition.sdext) 2>&1)

                                            status=$?

                                            if $bb [ $status -gt 0 ] && $bb [ $status -lt 4 ]; then
                                                    doLog w run_sdext_fschk "Error detected while checking sd-ext. Auto correction was performed!"

                                            elif $bb [ $status -gt 0 ]; then
                                                    doLog e run_sdext_fschk "Error detected while checking sd-ext. Everything was left uncorrected!"

                                                    if $bb [ ! -z "$lastError" ]; then
                                                        doLog d log "Shell Error Message: [$($bb echo $lastError | $bb awk '{print substr($0, 0, 150)}') ...]"
                                                    fi
                                            fi

                                        else
                                            doLog w run_sdext_fschk "Could not do a file system check on sd-ext. Missing e2fsck!"
                                            echo 0 > /data/property/m2sd.run_sdext_fschk
                                        fi

                                    else
                                        doLog d log "File system check is disabled, skipping"
                                    fi

                                    doLog v log "Setting optimized mount parameters on sd-ext"

                                    if $bb [ "`doProp get status.set_sdext_fstype`" = "ext4" ]; then
                                        doLog d log "Ext4 file system detected, checking journal settings"

                                        if $bb [ ! -z "`$bb which tune2fs`" ]; then
                                            if [ $(doProp get config.enable_sdext_journal) -lt 2 ]; then
                                                if $bb [ $(doProp get config.enable_sdext_journal) -eq 0 ]; then
                                                    if $bb [ ! -z "`tune2fs -l $(doProp get status.device.sdcard.partition.sdext) | $bb grep features | $bb grep has_journal`" ]; then
                                                        doLog v log "Disabling ext4 journal on sd-ext"
                                                        lastError=$(tune2fs -O ^has_journal $(doProp get status.device.sdcard.partition.sdext) 2>&1)

                                                        status=$?

                                                        if $bb [ $status -gt 0 ]; then
                                                                doLog e enable_sdext_journal "Error while trying to turn off sd-ext ext4 journal!"

                                                                if $bb [ ! -z "$lastError" ]; then
                                                                    doLog d log "Shell Error Message: [$($bb echo $lastError | $bb awk '{print substr($0, 0, 150)}') ...]"
                                                                fi
                                                        fi
                                                    fi

                                                else
                                                    if $bb [ -z "`tune2fs -l $(doProp get status.device.sdcard.partition.sdext) | grep features | grep has_journal`" ]; then
                                                        doLog v log "Enabling ext4 journal on sd-ext"
                                                        tune2fs -O has_journal $(doProp get status.device.sdcard.partition.sdext)

                                                        status=$?

                                                        if $bb [ $status -gt 0 ]; then
                                                                doLog e enable_sdext_journal "Error while trying to turn on sd-ext ext4 journal!"

                                                                if $bb [ ! -z "$lastError" ]; then
                                                                    doLog d log "Shell Error Message: [$($bb echo $lastError | $bb awk '{print substr($0, 0, 150)}') ...]"
                                                                fi
                                                        fi
                                                    fi
                                                fi

                                            else
                                                doLog d log "Journal settings is set to auto. Keeping default settings"
                                            fi

                                            $bb [ -z "`tune2fs -l $(doProp get status.device.sdcard.partition.sdext) | $bb grep features | $bb grep has_journal`" ] && doProp set status.enable_sdext_journal 0 || doProp set status.enable_sdext_journal 1

                                        else
                                            if $bb [ $(doProp get config.enable_sdext_journal) -lt 2 ]; then
                                                doLog w enable_sdext_journal "Could not handle the ext4 journal. Missing tune2fs!"
                                                echo 2 > /data/property/m2sd.enable_sdext_journal

                                            else
                                                doLog v enable_sdext_journal "Could not handle the ext4 journal. Missing tune2fs!"
                                            fi
                                        fi

                                    elif $bb [ "`doProp get status.set_sdext_fstype`" = "ext3" ]; then
                                        doLog d log "Ext3 file system detected, checking journal settings"

                                        if [ $(doProp get config.enable_sdext_journal) -eq 0 ]; then
                                            doLog v log "Setting parameter to disable ext3 journal"
                                            doProp set status.enable_sdext_journal 0
                                            mountParamsExtras="noload"

                                        else
                                            doLog d log "Journal settings is not set to disable, keeping journal enabled"
                                            doProp set status.enable_sdext_journal 1
                                        fi
                                    fi

                                    doProp set status.destination.external /sd-ext

                                    if $bb [ $(doProp get config.enable_reversed_mount) -eq 1 ]; then 
                                        doLog v log "R-mount is enabled, moving the internal data mount point to /sd-ext"

                                        lastError=$($bb mount --move /data /sd-ext 2>&1)

                                        if $bb [ -z "`$bb grep ' /sd-ext ' /proc/mounts`" ]; then
                                            doLog d log "Moving Internal data mount point failed. Trying manual umount/remount"
                                            mtdDevice="`$bb grep '/dev/' /proc/mounts | $bb grep ' /data ' | $bb awk '{print $1}'`"

                                            if $bb [ ! -z "$mtdDevice" ]; then
                                                doLog d log "Unmounting Internal data from /data"
                                                $bb umount /data || $bb umount -f /data || $bb umount -l /data

                                                if $bb [ -z "`$bb grep ' /data ' /proc/mounts`" ]; then
                                                    doLog d log "Trying to mount Internal data on /sd-ext"
                                                    $bb mount -o rw,nosuid,nodev,noatime,nodiratime $mtdDevice /sd-ext

                                                    if $bb [ -z "`$bb grep ' /sd-ext ' /proc/mounts`" ]; then
                                                        doLog d log "Failed to mount Internal data on /sd-ext, mounting it back on /data"
                                                        $bb mount -o $mtdDevice /data

                                                        if $bb [ ! -z "$lastError" ]; then
                                                            doLog d log "Shell Error Message: [$($bb echo $lastError | $bb awk '{print substr($0, 0, 150)}') ...]"
                                                        fi
                                                    fi
                                                fi
                                            fi
                                        fi

                                        if $bb [ ! -z "`$bb grep ' /sd-ext ' /proc/mounts`" ]; then
                                            doLog d log "Internal data was successfully moved from /data into /sd-ext"

                                            doProp set status.destination.internal /sd-ext
                                            doProp set status.destination.external /data

                                            doProp set status.enable_reversed_mount 1

                                        else
                                            doLog e enable_reversed_mount "It was not possible to move the internal data mount point!"
                                            doLog v log "Reversing content options due to r-mount failure in order to keep content in the same locations"

                                            for i in move_apps move_data move_dalvik; do
                                                $bb [ $(doProp get config.$i 0) -eq 0 ] && $(doProp set config.$i 1) || $(doProp set config.$i 0)
                                            done
                                        fi
                                    fi

                                    mountParamsFull="noatime,nodiratime,relatime,noauto_da_alloc,data=ordered,commit=15,barrier=1,nouser_xattr,errors=continue,nosuid,nodev"
                                    mountParamsLimited="noatime,nodiratime,relatime,nosuid,nodev"

                                    doLog d log "Starting mount operating on sd-ext"

                                    for i in $(doProp get status.set_sdext_fstype) auto; do
                                        $bb [ -z "$mountParamsExtras" ] && mp="$mountParamsFull,$mountParamsExtras" || mp="$mountParamsFull,$mountParamsExtras"

                                        while :; do
                                            if $bb [ ! -z "$mp" ]; then
                                                doLog d log "Trying to mount sd-ext as $i on $(doProp get status.destination.external) with options '$mp'"
                                                lastError=$($bb mount -o $mp -t $i $(doProp get status.device.sdcard.partition.sdext) $(doProp get status.destination.external) 2>&1); sync

                                            else
                                                lastError=$($bb mount -t $i $(doProp get status.device.sdcard.partition.sdext) $(doProp get status.destination.external) 2>&1); sync

                                                if $bb [ -z "`$bb cat /proc/mounts | $bb grep -w $(doProp get status.device.sdcard.partition.sdext)`" ]; then
                                                    # Very last change
                                                    $bb mount $(doProp get status.device.sdcard.partition.sdext) $(doProp get status.destination.external); sync
                                                fi
                                            fi

                                            if $bb [ ! -z "`$bb cat /proc/mounts | $bb grep -w $(doProp get status.device.sdcard.partition.sdext)`" ]; then
                                                doLog d log "The sd-ext partition was mounted, now testing writeable state"
                                                $bb echo 1 > $(doProp get status.destination.external)/writeTest
                                                $bb df /sd-ext 2> /dev/null; status=$?

                                                if  $bb [ $status -gt 0 ] || $bb [ ! -f $(doProp get status.destination.external)/writeTest ]; then
                                                    doLog e log "The sd-ext file system type cannot be used as an data partition. Please switch to something like Ext(2/3/4)!"
                                                    mountAction="skip"

                                                    $bb umount $(doProp get status.destination.external)
                                                fi

                                                doLog v log "The sd-ext partition was mounted successfully at $(doProp get status.destination.external)"

                                                $bb rm -rf $(doProp get status.destination.external)/writeTest

                                                if $bb [ ! -z "$mountParamsExtras" ] && ( $bb [ "$mp" != "$mountParamsFull,$mountParamsExtras" ] && $bb [ "$mp" != "$mountParamsLimited,$mountParamsExtras" ] ); then
                                                    doLog w enable_sdext_journal "It was not possible to mount the sd-ext partition without journal!"
                                                fi

                                                break 2

                                            elif $bb [ ! -z "$lastError" ]; then
                                                doLog d log "Shell Error Message: [$($bb echo $lastError | $bb awk '{print substr($0, 0, 150)}') ...]"
                                            fi

                                            if $bb [ ! -z "$mountParamsExtras" ] && [ "$mp" = "$mountParamsFull,$mountParamsExtras" ]; then
                                                doLog d log "The sd-ext partition could not be mounted. Trying again with different mount options"
                                                mp="$mountParamsLimited,$mountParamsExtras"

                                            elif $bb [ "$mp" = "$mountParamsFull" ] || $bb [ "$mp" = "$mountParamsLimited,$mountParamsExtras" ]; then
                                                doLog d log "The sd-ext partition could not be mounted. Trying again with different mount options"
                                                mp="$mountParamsLimited"

                                            elif $bb [ ! -z "$mp" ]; then
                                                doLog d log "The sd-ext partition could not be mounted. Trying again without additional mount options"
                                                mp=
                            
                                            else
                                                break
                                            fi
                                        done

                                        if [ "$i" = "auto" ]; then
                                            break

                                        else
                                            doLog w set_sdext_fstype "Could not mount sd-ext as $i. Switching to auto detection!"
                                        fi
                                    done

                                    if $bb [ -z "`$bb cat /proc/mounts | $bb grep -w $(doProp get status.device.sdcard.partition.sdext)`" ]; then
                                        doLog e enabled "The sd-ext partition could not be mounted!"

                                        if $bb [ $(doProp get status.enable_reversed_mount 0) -eq 1 ]; then
                                            doLog w enable_reversed_mount "Moving internal nand data mount point back to /data!"
                                            doProp remove status.enable_reversed_mount

                                            lastError=$($bb mount --move /sd-ext /data 2>&1)

                                            if $bb [ -z "`$bb grep ' /data ' /proc/mounts`" ]; then
                                                doLog d log "Moving Internal data mount point failed. Trying manual umount/remount"
                                                mtdDevice="`$bb grep '/dev/' /proc/mounts | $bb grep ' /sd-ext ' | $bb awk '{print $1}'`"

                                                if $bb [ ! -z "$mtdDevice" ]; then
                                                    doLog d log "Unmounting Internal data from /sd-ext"
                                                    $bb umount /sd-ext || $bb umount -f /sd-ext || $bb umount -l /sd-ext

                                                    if $bb [ -z "`$bb grep ' /sd-ext ' /proc/mounts`" ]; then
                                                        doLog d log "Trying to mount Internal data on /data"
                                                        $bb mount -o rw,nosuid,nodev,noatime,nodiratime $mtdDevice /data

                                                        if $bb [ -z "`$bb grep ' /data ' /proc/mounts`" ]; then
                                                            doLog e log "Could not move Internal data from /sd-ext back to /data"

                                                            if $bb [ ! -z "$lastError" ]; then
                                                                doLog d log "Shell Error Message: [$($bb echo $lastError | $bb awk '{print substr($0, 0, 150)}') ...]"
                                                            fi
                                                        fi
                                                    fi
                                                fi
                                            fi
                                        fi

                                        break 2

                                    elif $bb [ $(doProp get status.script_safe_mode 0) -eq 1 ]; then
                                        doLog d log "Safe-mode detected, creating temp symlinks between /sd-ext/app(-*) and /data/app(-*)"

                                        for i in /sd-ext/app/* /sd-ext/app-*/*; do
                                            $bb ln -s $i $($bb echo $i | $bb sed -e 's/^\/sd-ext\//\/data\//') 2> /dev/null
                                        done
                                    fi

                                    doLog v log "Preparing to move content between /data and /sd-ext"

                                    appFolders="app app-private app-system"

                                    $bb [ $(doCheckFolder /data/media) -eq 1 ] && sysFolders="property misc system local tombstones secure media" || sysFolders="property misc system local tombstones secure"

                                    # In Android 2.2+ /data/data is actually /data/user/0
                                    $bb [ $(doCheckFolder /data/user) -eq 1 ] && dataFolders="data user" || dataFolders="data"

                                    for i in /*.rc; do
                                        doRevert="$doRevert $($bb grep mkdir $i | $bb grep -ve '^[ \t]*#' | $bb grep -e ' \/data\/[^\/]* ' | $bb tr -s ' ' | $bb sed 's/mkdir \/data\/\([^ ]*\).*$/\1/' | $bb grep -ve '\(media\|secure\|lost+found\|local\|misc\|system\|tombstones\|property\|data\|dalvik\-\(cache\|system\)\|app\(\-[^ ]*\)*\)$')"
                                        appFolders="$appFolders $($bb grep mkdir $i | $bb grep -ve '^[ \t]*#' | $bb grep -e ' \/data\/app\(\-[^ ]*\)*[^\/]* ' | $bb tr -s ' ' | $bb sed 's/mkdir \/data\/\([^ ]*\).*$/\1/' | $bb grep -ve 'app\(\-system\|\-private\)*$')"
                                    done

                                    externalSize=$(doGetSize /sd-ext)
                                    internalSize=$(doGetSize /data)

                                    $bb [ $(doProp get config.move_data) -eq 1 ] && doMove="$doMove $dataFolders" || doRevert="$doRevert $dataFolders"
                                    $bb [ $(doProp get config.move_dalvik) -eq 1 ] && doMove="$doMove dalvik-cache" || doRevert="$doRevert dalvik-cache"
                                    $bb [ $(doProp get config.move_apps) -eq 1 ] && doMove="$doMove $appFolders" || doRevert="$doRevert $appFolders"
                                    $bb [ $externalSize -lt $internalSize ] && doMoveOrder="revert move revert-retry move-force link" || doMoveOrder="move revert move revert-retry move-force link"

                                    # Failsafe in case r-mount fails, content will stay on the same selected devices
                                    $bb [ $(doProp get attention.enable_reversed_mount 0) -eq 1 ] && doRevertContent="$doMove" || doRevertContent="$doRevert"
                                    $bb [ $(doProp get attention.enable_reversed_mount 0) -eq 1 ] && doMoveContent="$doRevert" || doMoveContent="$doMove"
                                    $bb [ $(doProp get status.enable_reversed_mount 0) -eq 1 ] && doMoveContent="$doMoveContent $sysFolders" || doRevertContent="$doRevertContent $sysFolders"

                                    # Remove dupplicates
                                    doRevertContent="`echo $doRevertContent | sed 's/ /\n/g' | awk '!a[$0]++'`"
                                    doMoveContent="`echo $doMoveContent | sed 's/ /\n/g' | awk '!a[$0]++'`"

                                    for action in $doMoveOrder; do
                                        case $action in
                                            revert|revert-retry)
                                                if $bb [ ! -z "$doRevertContent" ]; then
                                                    doHandleContent="$doRevertContent"
                                                    doRevertContent=

                                                    for x in $doHandleContent; do
                                                        doCreateFolder /data/$x

                                                        doLog d log "Looking in /sd-ext/$x to see if something should be reverted back to /data/$x"

                                                        if $bb [ -d /sd-ext/$x ] && $bb [ ! -L /sd-ext/$x ] && $bb [ ! -z "`$bb ls -v /sd-ext/$x`" ] && $bb [ ! -z "`$bb find /sd-ext/$x -type f`" ]; then
                                                            doLog v log "Reverting /sd-ext/$x back to /data/$x"

                                                            xSize="`$bb echo $($bb du -s -m /sd-ext/$x) | $bb awk '{print $1}'`"

                                                            doLog d log "The size of /sd-ext/$x is ${xSize}Mb. Comparing it to the remaining spaze on /data which is ${internalSize}Mb"

                                                            if $bb [ $internalSize -gt $xSize ]; then
                                                                if $bb [ "$x" != "dalvik-cache" ]; then
                                                                    for i in /sd-ext/$x/*; do
                                                                        ii="`$bb basename $i`"

                                                                        if $bb [ ! -L /sd-ext/$x/$ii ] || ( $bb [ ! -f /data/$x/$ii ] && $bb [ ! -d /data/$x/$ii ] ); then
                                                                            if $bb [ -e /data/$x/$ii ]; then
                                                                                $bb rm -rf /data/$x/$ii
                                                                            fi

                                                                            $bb mv -f /sd-ext/$x/$ii /data/$x/

                                                                        else
                                                                            $bb rm -rf /sd-ext/$x/$ii
                                                                        fi
                                                                    done

                                                                    xSize=$($bb echo $($bb du -s -m /data/$x) | $bb awk '{print $1}')

                                                                    ( $bb [ -d /sd-ext/$x ] && $bb [ ! -z "`$bb ls -v /sd-ext/$x`" ] && $bb [ ! -z "`$bb find /sd-ext/$x -type f`" ] ) && attention="$attention ${x}:revert:notempty" || $bb rm -rf /sd-ext/$x

                                                                else
                                                                    $bb rm -rf /sd-ext/$x
                                                                fi

                                                                internalSize=$(($internalSize - $xSize))
                                                                externalSize=$(($externalSize + $xSize))

                                                            elif $bb [ "$action" = "revert-retry" ]; then
                                                                doLog d log "Could not revert /sd-ext/$x do to low storage on /data. Giving up"
                                                                doMoveContent="$doMoveContent $x"
                                                                attention="$attention ${x}:revert:size"

                                                            else
                                                                doLog d log "Could not revert /sd-ext/$x do to low storage on /data. Trying again later"
                                                                doRevertContent="$doRevertContent $x"
                                                            fi

                                                        elif $bb [ -e /sd-ext/$x ]; then
                                                            $bb rm -rf /sd-ext/$x
                                                        fi
                                                    done
                                                fi
                                            ;;

                                            move|move-force)
                                                if $bb [ ! -z "$doMoveContent" ]; then
                                                    doHandleContent="$doMoveContent"
                                                    doMoveContent=

                                                    for x in $doHandleContent; do
                                                        doCreateFolder /data/$x 1

                                                        doLog d log "Looking in /data/$x to see if something should be moved into /sd-ext/$x"

                                                        if $bb [ -d /data/$x ] && $bb [ ! -z "`$bb ls -v /data/$x`" ] && $bb [ ! -z "`$bb find /data/$x -type f`" ]; then
                                                            doLog v log "Moving content from /data/$x to /sd-ext/$x"

                                                            xSize="`$bb echo $($bb du -s -m /data/$x) | $bb awk '{print $1}'`"

                                                            doLog d log "The size of /data/$x is ${xSize}Mb. Comparing it to the remaining spaze on /sd-ext which is ${externalSize}Mb"

                                                            if $bb [ $externalSize -gt $xSize ]; then
                                                                if $bb [ "$x" != "dalvik-cache" ]; then
                                                                    for i in /data/$x/*; do
                                                                        ii="`$bb basename $i`"

                                                                        if $bb [ ! -L /data/$x/$ii ] || ( $bb [ ! -f /sd-ext/$x/$ii ] && $bb [ ! -d /sd-ext/$x/$ii ] ); then
                                                                            if $bb [ -e /sd-ext/$x/$ii ]; then
                                                                                $bb rm -rf /sd-ext/$x/$ii
                                                                            fi

                                                                            $bb mv -f /data/$x/$ii /sd-ext/$x/

                                                                            if $bb [ $(doProp get status.script_safe_mode 0) -eq 1 ]; then
                                                                                # The system may boot before init.d is done and we need the package manager to register all the apps
                                                                                $bb ln -sf /sd-ext/$x/$ii /data/$x/$ii
                                                                            fi
                                                                        fi
                                                                    done

                                                                    xSize=$($bb echo $($bb du -s -m /sd-ext/$x) | $bb awk '{print $1}')

                                                                    ( $bb [ -d /data/$x ] && $bb [ ! -z "`$bb ls -v /data/$x`" ] && $bb [ ! -z "`$bb find /data/$x -type f`" ] ) && attention="$attention ${x}:move:notempty"

                                                                else
                                                                    $bb rm -rf /data/$x/*
                                                                fi

                                                                externalSize=$(($externalSize - $xSize))
                                                                internalSize=$(($internalSize + $xSize))

                                                                doLinkContent="$doLinkContent $x"

                                                            elif $bb [ "$action" = "move-force" ]; then
                                                                doLog d log "Could not move /data/$x do to low storage on /sd-ext. Giving up"
                                                                attention="$attention ${x}:move:size"

                                                            else
                                                                doLog d log "Could not move /data/$x do to low storage on /sd-ext. Trying again later"
                                                                doMoveContent="$doMoveContent $x"
                                                            fi

                                                        else
                                                            doLinkContent="$doLinkContent $x"
                                                        fi
                                                    done
                                                fi
                                            ;;

                                            link)
                                                if $bb [ ! -z "$attention" ]; then
                                                    for x in $attention; do
                                                        case $($bb echo $x | $bb cut -d ':' -f1 | $bb cut -d '-' -f1) in
                                                            app) reporter="move_apps" ;;
                                                            dalvik) reporter="move_dalvik" ;;
                                                            data|user) reporter="move_data" ;;
                                                            *) reporter="log" ;;
                                                        esac

                                                        if $bb [ "`$bb echo $x | $bb cut -d ':' -f2`" = "move" ]; then
                                                            $bb [ "`$bb echo $x | $bb cut -d ':' -f3`" = "size" ] && doLog e $reporter "The content of /data/$($bb echo $x | $bb cut -d ':' -f1) is to big to be moved to sd-ext!" || doLog e $reporter "Not everything from /data/$($bb echo $x | $bb cut -d ':' -f1) could be moved to /sd-ext/$($bb echo $x | $bb cut -d ':' -f1). Check available disk space!"

                                                        else
                                                            $bb [ "`$bb echo $x | $bb cut -d ':' -f3`" = "size" ] && doLog e $reporter "The content of /sd-ext/$($bb echo $x | $bb cut -d ':' -f1) is to big to be reverted back to data!" || doLog e $reporter "Not everything from /sd-ext/$($bb echo $x | $bb cut -d ':' -f1) could be reverted back to /data/$($bb echo $x | $bb cut -d ':' -f1). Check available disk space!"
                                                        fi
                                                    done
                                                fi

                                                if $bb [ ! -z "$doLinkContent" ]; then
                                                    for x in $doLinkContent; do
                                                        doLinkContent=

                                                        # Do some cleanup
                                                        if $bb [ $(doProp get status.script_safe_mode 0) -eq 1 ] && $bb [ "$($bb echo $x | $bb cut -d '-' -f1)" = "app" ]; then
                                                            doLog d log "Safe-mode detected, cleaning up some unused symlinks"

                                                            for i in /data/$x/*; do
                                                                if $bb [ -L $i ] && $bb [ ! -e $($bb readlink -f $i) ]; then
                                                                    $bb rm -rf $i
                                                                fi
                                                            done
                                                        fi

                                                        doLog v log "Attaching /sd-ext/$x to /data/$x"
                                                        lastError=$($bb mount --bind /sd-ext/$x /data/$x 2>&1)

                                                        if $bb [ ! -z "`$bb grep " /data/$x " /proc/mounts`" ] || $bb [ ! -z "`$bb grep " /sd-ext/$x " /proc/mounts`" ]; then
                                                            case $($bb echo $x | $bb cut -d '-' -f1) in
                                                                app) doProp set status.move_apps 1 ;;
                                                                dalvik) doProp set status.move_dalvik 1 ;;
                                                                data|user) doProp set status.move_data 1 ;;
                                                            esac

                                                        else
                                                            case $($bb echo $x | $bb cut -d '-' -f1) in
                                                                app) reporter="move_apps" ;;
                                                                dalvik) reporter="move_dalvik" ;;
                                                                data|user) reporter="move_data" ;;
                                                                *) reporter="log" ;;
                                                            esac

                                                            doLog e $reporter "It was not possible to link /sd-ext/$x to /data/$x!"

                                                            if $bb [ ! -z "$lastError" ]; then
                                                                doLog d log "Shell Error Message: [$($bb echo $lastError | $bb awk '{print substr($0, 0, 150)}') ...]"
                                                            fi
                                                        fi
                                                    done
                                                fi
                                            ;;
                                        esac
                                    done
 
                                    if $bb [ $(doProp get status.enable_reversed_mount 0) -eq 1 ]; then
                                        # Make sure that important sub-folders from init.rc exists. Android 4.x will create issues if they do.
                                        for x in /*.rc; do
                                            doCreate="$doCreate $($bb grep mkdir $x | $bb grep -e ' \/data\/[^\/]*\(\/[^\/]*\)* ' | $bb tr -s ' ' | $bb sed 's/mkdir \(\/data\/[^ ]*\).*$/\1/')"
                                        done

                                        doCreate="`echo $doCreate | sed 's/ /\n/g' | awk '!a[$0]++'`"

                                        for i in $doCreate; do
                                            doLog d log "Making sure that the init.rc defined folder $i exists"
                                            doCreateFolder $i
                                        done
                                    fi

                                    # Android 4.2 has some hidden dependencies that it will not re-create of it's own. This is of cause for r-mount
                                    doRevert="`$bb ls -av /sd-ext | $bb grep -e '^\.' | $bb grep -ve '^[\.]*$'`"
                                    for i in $doRevert; do
                                        doLog d log "Reverting $i back to /data/"
                                        $bb mv -f $i /data/
                                    done

                                    break 2
                                fi
                            done

                            if $bb [ $mmcTries -gt 7 ]; then
                                    doLog e log "Timedout while searching for the sd-ext partition!"; break

                            else
                                    $bb sleep 1
                            fi
                        done

                        doLog v log "Optimizing the internal nand partitions"

                        for i in system data cache; do
                                mtdDevice="`$bb grep '/dev/' /proc/mounts | $bb grep " /$i " | $bb awk '{print $1}'`"

                                doLog d log "Located the device $mtdDevice belonging to /$i"

                                if $bb [ -b $mtdDevice ]; then
                                        mtdMM="`$bb ls -l $mtdDevice | $bb tr -s ' ' | $bb sed -ne 's/^.*[ ]\([0-9]*\),[ ]\([0-9]*\)[ ].*$/\1:\2/p'`"

                                        doLog d log "Located the device MM number $mtdMM belonging to /$i"

                                        if $bb [ -e /sys/devices/virtual/bdi/$mtdMM/read_ahead_kb ]; then
                                                doLog v log "Setting $i nand readahead to 4kb"
                                                $bb echo 4 > /sys/devices/virtual/bdi/$mtdMM/read_ahead_kb
                                        fi

                                        doLog v log "Setting optimized mount parameters on $i"
                                        $bb mount -o remount,noatime,nodiratime,relatime /$i

                                else
                                        doLog w log "Could not locate the device file for /$i"
                                fi
                        done

                        $bb sync

                        doLog v log "Looking for new system apps in /data/app-system to link to /system/app"

                        # Do an S-Off test
                        doLog d log "Running S-On test on /system"
                        $bb touch /system/s-off 2> /dev/null

                        if $bb [ -e /system/s-off ]; then
                            $bb rm -rf /system/s-off

                            for x in /system/app/*; do
                                if $bb [ -L $x ] && $bb [ ! -e "`$bb readlink $x`" ]; then
                                    $bb rm -rf $x
                                fi
                            done

                            if $bb [ -d /data/app-system ] && $bb [ ! -z "`$bb ls -v /data/app-system`" ]; then
                                for x in /data/app-system/*; do
                                    doLog d log "Checking system link on $x"

                                    y="`$bb basename $x`"

                                    if $bb [ ! -e /system/app/$y ] || $bb [ ! -L /system/app/$y ]; then
                                        $bb [ -e /system/app/$y ] && $bb rm -rf /system/app/$y

                                        doLog v log "Creating link for $($bb basename $x) in /system/app/"
                                        $bb ln -s $x /system/app/
                                    fi
                                done
                            fi

                        else
                            doLog d log "The /system partition is S-On protected"

                            if $bb [ -d /data/app-system ] && $bb [ ! -z "`$bb ls -v /data/app-system`" ]; then
                                doLog w log "Cannot handle app links from /data/app-system to /system/app on S-On devices!"
                            fi
                        fi

                        doLog d log "Checking SWAP partition and SWAP settings"

                        if $bb [ -e /proc/sys/vm/swappiness ] && $bb [ ! -z "`doProp get status.device.sdcard.partition.swap`" ] && $bb [ $(doProp get config.enable_swap) -eq 1 ]; then
                                doLog v log "Activating SWAP partition"
                                lastError=$($bb swapon $(doProp get status.device.sdcard.partition.swap) 2>&1)

                                if $bb [ "$?" = "0" ]; then
                                        doProp set status.enable_swap 1

                                        doLog v log "Setting swappiness value to '$(doProp get config.set_swap_level 0)'"
                                        echo $(doProp get config.set_swap_level 0) > /proc/sys/vm/swappiness

                                        if $bb [ "$(doProp get config.set_swap_level 0)" != "`$bb cat /proc/sys/vm/swappiness`" ]; then
                                            doLog w set_swap_level "The swappiness value could not be changed!"
                                        fi

                                        doProp set status.set_swap_level $($bb cat /proc/sys/vm/swappiness)

                                else
                                        doLog e enable_swap "Could not activate the SWAP partition!"
                                        echo 0 > /data/property/m2ds.enable_swap

                                        if $bb [ ! -z "$lastError" ]; then
                                            doLog d log "Shell Error Message: [$($bb echo $lastError | $bb awk '{print substr($0, 0, 150)}') ...]"
                                        fi
                                fi

                        elif $bb [ ! -e /proc/sys/vm/swappiness ] && $bb [ $(doProp get config.enable_swap) -eq 1 ]; then
                            doLog w enable_swap "You kernel does not support SWAP partitions!"

                        elif $bb [ -z "`doProp get status.device.sdcard.partition.swap`" ] && $bb [ $(doProp get config.enable_swap) -eq 1 ]; then
                            doLog w enable_swap "Did not find any SWAP partition!"
                            echo 0 > /data/property/m2sd.enable_swap
                        fi

                        doLog d log "Handling the Cache partition and it's settings"

                        if $bb [ $(doProp get config.enable_cache) -eq 1 ] || ( $bb [ $(doProp get config.enable_cache) -eq 2 ] && $bb [ $(doGetSize /cache) -lt 40 ] ); then
                            doLog v log "Preparing to replace the cache partition"

                            externalDestination=$(doProp get status.destination.external /sd-ext)
                            internalDestination=$(doProp get status.destination.internal /data)

                            $bb [ ! -z "`$bb cat /proc/mounts | $bb grep -w $(doProp get status.device.sdcard.partition.sdext /sd-ext)`" ] && externalSize=$(doGetSize $externalDestination) || externalSize=0
                            internalSize=$(doGetSize $internalDestination)

                            if $bb [ ! -z "`$bb grep ' /sd-ext ' /proc/mounts`" ] && ( $bb [ $externalSize -ge 128 ] || $bb [ $(doProp get config.no_tmpfs_cache) -eq 1 ] ) && $bb [ $externalSize -gt $internalSize ]; then
                                    doLog d log "Setting cache location for $externalDestination/cache"
                                    cacheLocation="$externalDestination/cache"

                            elif $bb [ $internalSize -ge 128 ] || $bb [ $(doProp get config.no_tmpfs_cache) -eq 1 ]; then
                                    doLog d log "Setting cache location for $internalDestination/cache"
                                    cacheLocation="$internalDestination/cache"

                            else
                                    doLog d log "Setting cache location for /cache (tmpfs)"
                                    cacheLocation="tmpfs"
                            fi

                            for i in $externalDestination/cache $internalDestination/cache; do
                                if $bb [ "$i" != "$cacheLocation" ] && $bb [ -d $i ]; then
                                        $bb rm -rf $i

                                elif $bb [ ! -d $i ]; then
                                        $bb mkdir $i
                                        $bb chown 1000.2001 $i
                                        $bb chmod 0771 $i
                                fi
                            done

                            if $bb [ -z "`grep dalvik.vm.dexopt-data-only=1 /system/build.prop`" ] && $bb [ $(doCheckFolder /cache/dalvik-cache) -eq 1 ]; then
                                if $bb [ $(doProp get status.script_safe_mode) -eq 1 ]; then
                                    if $bb [ $(doProp config.enable_cache) -eq 1 ]; then
                                        doLog w enable_cache "Cannot handle cache with CM's /cache/dalvik-cache on systems running in safe-mode!"
                                    fi

                                    doLog d log "Safe-mode detected with CM /cache/dalvik-cache, skipping cache configurations"

                                    doProp set status.enabled 1; break
                                fi

                                doCreateFolder /internal-cache

                                doLog d log "Moving Internal cache mount point from /cache to /internal-cache"
                                lastError=$($bb mount --move /cache /internal-cache 2>&1)

                                if $bb [ -z "`$bb grep ' /internal-cache ' /proc/mounts`" ]; then
                                    doLog d log "Moving Internal cache mount point failed. Trying manual umount/remount"
                                    mtdDevice="`$bb grep '/dev/' /proc/mounts | $bb grep ' /cache ' | $bb awk '{print $1}'`"

                                    doLog d log "Unmounting Internal cache from /cache"
                                    $bb umount /cache || $bb umount -f /cache || $bb umount -l /cache

                                    if $bb [ -z "`$bb grep ' /cache ' /proc/mounts`" ]; then
                                        doLog d log "Trying to mount Internal cache on /internal-cache"
                                        $bb mount $mtdDevice /internal-cache

                                        if $bb [ -z "`$bb grep ' /internal-cache ' /proc/mounts`" ]; then
                                            doLog e enable_cache "Could not move Internal cache from /cache to /internal-cache"

                                            if $bb [ ! -z "$lastError" ]; then
                                                doLog d log "Shell Error Message: [$($bb echo $lastError | $bb awk '{print substr($0, 0, 150)}') ...]"
                                            fi

                                            doProp set status.enabled 1; break
                                        fi

                                    else
                                        doLog e enable_cache "Could not move Internal cache from /cache to /internal-cache"

                                        doProp set status.enabled 1; break
                                    fi
                                fi

                                if $bb [ ! -z "`$bb grep ' /internal-cache ' /proc/mounts`" ]; then
                                    doLog v log "The internal cache was successfully moved to /internal-cache"
                                fi

                            else
                                doLog v log "Unmounting internal cache partition"
                                $bb umount /cache
                            fi

                            doLog v log "Attaching $cacheLocation to /cache"
                            if $bb [ "$cacheLocation" = "tmpfs" ]; then
                                 lastError=$($bb mount -t tmpfs -o rw,nosuid,nodev,noatime,nodiratime,relatime,mode=0771,uid=1000,gid=2001 tmpfs /cache 2>&1)
                            else
                                 lastError=$($bb mount --bind $cacheLocation /cache 2>&1)
                            fi

                            if $bb [ ! -z "`$bb grep ' /cache ' /proc/mounts`" ] || ( $bb [ "$cacheLocation" != "tmpfs" ] && $bb [ ! -z "`$bb grep " $cacheLocation " /proc/mounts`" ] ); then
                                doProp set status.enable_cache 1

                                doSetPerms /cache 1000.2001 0771

                                if $bb [ "$cacheLocation" = "tmpfs" ]; then
                                    doLog v destination.cache "Cache has been mounted as tmpfs"
                                    doProp set status.destination.cache /cache

                                else
                                    doProp set status.destination.cache $cacheLocation
                                fi

                                for x in /*.rc; do
                                    doCreate="$doCreate $($bb grep mkdir $x | $bb grep -e ' \/cache\/[^\/]*\(\/[^\/]*\)* ' | $bb tr -s ' ' | $bb sed 's/mkdir \(\/cache\/[^ ]*\).*$/\1/')"
                                done

                                doCreate="`echo $doCreate | sed 's/ /\n/g' | awk '!a[$0]++'`"

                                for i in $doCreate; do
                                    doLog d log "Making sure that the init.rc defined folder $i exists"
                                    doCreateFolder $i
                                done

                                if $bb [ -z "`grep dalvik.vm.dexopt-data-only=1 /system/build.prop`" ] && $bb [ $(doCheckFolder /cache/dalvik-cache) -eq 1 ]; then
                                    doLog v log "Attaching /internal-cache/dalvik-cache to $(doProp get status.destination.cache /cache)/dalvik-cache"
                                    $bb rm -rf $(doProp get status.destination.cache /cache)/dalvik-cache/*
                                    lastError=$($bb mount --bind /internal-cache/dalvik-cache $(doProp get status.destination.cache /cache)/dalvik-cache 2>&1)

                                    if $bb [ -z "`$bb grep ' /cache/dalvik-cache ' /proc/mounts`" ] && $bb [ -z "`$bb grep ' /internal-cache/dalvik-cache ' /proc/mounts`" ] && $bb [ -z "`$bb grep " $(doProp get status.destination.cache /cache)/dalvik-cache " /proc/mounts`" ]; then
                                        doLog w enable_cache "Could not attach CM's cache dalvik to $(doProp get status.destination.cache /cache)/dalvik-cache"
                                        $bb rm -rf /internal-cache/dalvik-cache/*

                                        if $bb [ ! -z "$lastError" ]; then
                                            doLog d log "Shell Error Message: [$($bb echo $lastError | $bb awk '{print substr($0, 0, 150)}') ...]"
                                        fi

                                    else
                                        # Be very sure that these perms are as they should or you will end up with a lot of FC
                                        doSetPerms /cache/dalvik-cache 1000.1000 0771
                                    fi
                                fi

                             else
                                doLog e enable_cache "It was not possible to attach $cacheLocation to /cache!"
            
                                if $bb [ -z "`grep dalvik.vm.dexopt-data-only=1 /system/build.prop`" ] && $bb [ $(doCheckFolder /cache/dalvik-cache) -eq 1 ]; then
                                    $bb umount /internal-cache && $bb mount /cache

                                else
                                    $bb mount /cache
                                fi

                                if $bb [ ! -z "$lastError" ]; then
                                    doLog d log "Shell Error Message: [$($bb echo $lastError | $bb awk '{print substr($0, 0, 150)}') ...]"
                                fi
                             fi

                        elif $bb [ $(doProp get config.enable_cache) -eq 2 ]; then
                            doLog d log "The cache stettings are set to auto and internal cache storage is $(doGetSize /cache)Mb, leaving cache untouched"

                        else
                            doLog d log "The cache stettings are disabled, leaving cache untouched"
                        fi

                        doProp set status.enabled 1
                    ;;
                esac
            fi

	        $bb [ "$modRoot" != "rw" ] && $bb mount -o remount,ro /
	        $bb [ "$modSystem" != "rw" ] && $bb mount -o remount,ro /system
        ;;
    esac

    break

done
